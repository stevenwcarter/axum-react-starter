// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use bigdecimal::{FromPrimitive, ToPrimitive};
use chrono::NaiveDateTime;
use juniper::{GraphQLInputObject, GraphQLObject};
use uuid::Uuid;

use crate::{context::GraphQLContext, schema::*, svc::ClientSvc};
use bigdecimal::BigDecimal;
use diesel::prelude::*;

#[derive(Queryable, Debug, Identifiable, Insertable, Selectable, AsChangeset, GraphQLObject)]
#[diesel(primary_key(uuid))]
pub struct Client {
    pub uuid: String,
    pub name: String,
    pub description: Option<String>,
    pub archived: Option<bool>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(GraphQLInputObject, Debug, Clone)]
pub struct ClientInput {
    pub uuid: Option<String>,
    pub name: String,
    pub description: Option<String>,
    pub archived: Option<bool>,
}
impl From<ClientInput> for Client {
    fn from(input: ClientInput) -> Self {
        Client {
            uuid: input.uuid.unwrap_or_else(|| Uuid::now_v7().to_string()),
            name: input.name,
            description: input.description,
            archived: input.archived,
            created_at: None,
            updated_at: None,
        }
    }
}
