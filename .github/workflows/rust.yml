name: Build

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "develop"

env:
  AWS_REGION: us-east-1

jobs:
  build-site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Yarn
        run: npm install -g yarn
      - name: Use Node.js 20.x with caching
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Run install
        uses: borales/actions-yarn@v5
        with:
          cmd: install --frozen-lockfile
          dir: ./site
      - name: Build production bundle
        uses: borales/actions-yarn@v5
        with:
          cmd: build
          dir: ./site
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-site-artifacts
          path: ./site/build
  test-site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Yarn
        run: npm install -g yarn
      - name: Use Node.js 20.x with caching
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Run install
        uses: borales/actions-yarn@v5
        with:
          cmd: install --frozen-lockfile
          dir: ./site
      - name: Test production bundle
        uses: borales/actions-yarn@v5
        with:
          cmd: test --coverage
          dir: ./site
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-reports
          path: site/coverage/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: smart-tests
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  build-docker:
    runs-on: ubuntu-latest
    needs: build-site
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare build directory
        run: |
          mkdir -p ./dnd-react/build
      - name: Download build site artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-site-artifacts
          path: ./site/build/
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.docker_registry }}/axum_react_starter
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push docker image w apikey functionality
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.apikey
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/axum_react_starter:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/axum_react_starter:buildcache,mode=max,image-manifest=true,oci-mediatypes=true
  lambda:
    runs-on: ubuntu-latest
    needs: build-site
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-build-cache
      - name: Create .env.prod file
        run: |
          echo "$DOCKER_ENV" >> .env.prod
        shell: bash
        env:
          REDIS_HOST: ${{secrets.DOCKER_ENV }}
      - name: Download build site artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-site-artifacts
          path: ./site/build/
      - name: Release lambda
        run: |
          pip install cargo-lambda
          cargo lambda build --compiler cargo --release
        #   cargo lambda deploy <FUNCTION-NAME>
        # env:
        #   AWS_DEFAULT_REGION: <YOUR-REGION>
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Save lamba artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-bundle
          path: ./target/lambda/axum-react-starter/bootstrap
